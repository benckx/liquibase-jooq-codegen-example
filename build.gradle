import groovy.xml.MarkupBuilder
import liquibase.Contexts
import liquibase.Liquibase
import liquibase.database.DatabaseFactory
import liquibase.database.jvm.JdbcConnection
import liquibase.resource.ClassLoaderResourceAccessor
import liquibase.resource.CompositeResourceAccessor
import liquibase.resource.FileSystemResourceAccessor
import org.h2.Driver
import org.jooq.codegen.GenerationTool

import java.sql.Connection
import java.sql.Statement

buildscript {
    repositories {
        mavenCentral()
        google()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"

        classpath "org.jooq:jooq-codegen:$jooqVersion"
        classpath "com.h2database:h2:1.3.148"
        classpath "org.liquibase:liquibase-core:$liquibaseVersion"
    }
}

plugins {
    id "com.github.ben-manes.versions" version "0.43.0"
    id "org.jetbrains.kotlin.jvm" version "$kotlinVersion"
}

apply plugin: 'idea'
apply plugin: 'java'

repositories {
    mavenCentral()
    google()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

    // DB
    compile "org.liquibase:liquibase-core:$liquibaseVersion"
    compile 'org.xerial:sqlite-jdbc:3.39.3.0'
    compile "org.jooq:jooq:$jooqVersion"

    // Logging
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'ch.qos.logback:logback-classic:1.2.3'
    compile 'ch.qos.logback:logback-core:1.2.3'
}

sourceSets {
    main {
        java {
            srcDirs "$buildDir/jooq"
        }
    }
}

tasks.getByPath("compileKotlin").doFirst {
    Connection conn = new Driver().connect("jdbc:h2:mem:test", null)

    Statement stmt = conn.createStatement()
    stmt.execute("drop all OBJECTS")
    stmt.execute("create schema EXAMPLE_DB")
    stmt.execute("set schema EXAMPLE_DB")
    stmt.close()

    def liquibaseDb = DatabaseFactory.getInstance().findCorrectDatabaseImplementation(new JdbcConnection(conn))
    def contextClassLoader = Thread.currentThread().getContextClassLoader()

    def threadClFO = new ClassLoaderResourceAccessor(contextClassLoader)
    def clFO = new ClassLoaderResourceAccessor()
    def fsFO = new FileSystemResourceAccessor()
    def liquibase = new Liquibase("src/main/resources/liquibase-changelog.xml", new CompositeResourceAccessor(clFO, fsFO, threadClFO), liquibaseDb)
    liquibase.update(new Contexts())
    conn.commit()

    def writer = new StringWriter()
    new MarkupBuilder(writer).configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.11.0.xsd') {
        jdbc() {
            driver('org.h2.Driver')
            url("jdbc:h2:mem:test")
            user("")
            password("")
        }
        generator {
            database {
                inputSchema('EXAMPLE_DB')
                excludes('DATABASECHANGELOG|DATABASECHANGELOGLOCK')
            }
            generate([:]) {
                pojos false
                daos true
            }
            target() {
                packageName('dev.encelade.example.dao.codegen')
                directory("$buildDir/jooq")
            }
        }
    }

    GenerationTool.generate(writer.toString())
}
