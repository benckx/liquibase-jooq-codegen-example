import liquibase.Contexts
import liquibase.Liquibase
import liquibase.database.DatabaseFactory
import liquibase.database.jvm.JdbcConnection
import liquibase.resource.ClassLoaderResourceAccessor
import liquibase.resource.CompositeResourceAccessor
import liquibase.resource.FileSystemResourceAccessor
import org.h2.Driver
import org.jooq.codegen.GenerationTool
import org.jooq.meta.jaxb.*

import java.sql.Connection
import java.sql.Statement

buildscript {
    repositories {
        mavenCentral()
        google()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"

        classpath "org.jooq:jooq-codegen:$jooqVersion"
        classpath "com.h2database:h2:2.1.214"
        classpath "org.liquibase:liquibase-core:$liquibaseVersion"
    }
}

plugins {
    id "com.github.ben-manes.versions" version "0.43.0"
    id "org.jetbrains.kotlin.jvm" version "$kotlinVersion"
}

apply plugin: 'idea'
apply plugin: 'java'

repositories {
    mavenCentral()
    google()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

    // DB
    implementation "org.liquibase:liquibase-core:$liquibaseVersion"
    implementation 'org.xerial:sqlite-jdbc:3.39.3.0'
    implementation "org.jooq:jooq:$jooqVersion"

    // Logging
    implementation 'org.slf4j:slf4j-api:1.7.25'
    implementation 'ch.qos.logback:logback-classic:1.2.3'
    implementation 'ch.qos.logback:logback-core:1.2.3'
}

sourceSets {
    main {
        java {
            srcDirs "$buildDir/jooq"
        }
    }
}

tasks.getByPath("compileKotlin").doFirst {
    Connection conn = new Driver().connect("jdbc:h2:mem:test", null)

    Statement stmt = conn.createStatement()
    stmt.execute("drop all OBJECTS")
    stmt.execute("create schema EXAMPLE_DB")
    stmt.execute("set schema EXAMPLE_DB")
    stmt.close()

    def liquibaseDb = DatabaseFactory.getInstance().findCorrectDatabaseImplementation(new JdbcConnection(conn))
    def contextClassLoader = Thread.currentThread().getContextClassLoader()

    def threadClFO = new ClassLoaderResourceAccessor(contextClassLoader)
    def clFO = new ClassLoaderResourceAccessor()
    def fsFO = new FileSystemResourceAccessor()
    def liquibase = new Liquibase("src/main/resources/liquibase-changelog.xml", new CompositeResourceAccessor(clFO, fsFO, threadClFO), liquibaseDb)
    liquibase.update(new Contexts())
    conn.commit()

    GenerationTool.generate(
            new Configuration()
                    .withJdbc(new Jdbc()
                            .withDriver('org.h2.Driver')
                            .withUrl('jdbc:h2:mem:test')
                            .withUser('')
                            .withPassword(''))
                    .withGenerator(new Generator()
                            .withDatabase(
                                    // exclude Liquibase-specific tables
                                    new Database()
                                            .withExcludes("DATABASECHANGELOG|DATABASECHANGELOGLOCK")
                                            .withInputSchema("EXAMPLE_DB")
                            )
                            .withGenerate(new Generate()
                                    .withPojos(true)
                                    .withDaos(true))
                            .withTarget(
                                    // choose the target package and directory
                                    // by using build folder, we ensure the generated code is removed on "clean"
                                    // and is not versioned on Git
                                    new Target()
                                            .withPackageName('dev.encelade.example.dao.codegen')
                                            .withDirectory("$buildDir/jooq"))
                    )
    )
}

kotlin {
    jvmToolchain {
        languageVersion.set(JavaLanguageVersion.of("18"))
    }
}
