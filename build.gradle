import liquibase.Contexts
import liquibase.Liquibase
import liquibase.database.core.H2Database
import liquibase.database.jvm.JdbcConnection
import liquibase.resource.DirectoryResourceAccessor
import org.h2.Driver
import org.jooq.codegen.GenerationTool
import org.jooq.meta.jaxb.*

import java.sql.Connection
import java.sql.Statement

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jooq:jooq-codegen:$jooqVersion"
        classpath "com.h2database:h2:$h2Version"
        classpath "org.liquibase:liquibase-core:$liquibaseVersion"
    }
}

plugins {
    id "com.github.ben-manes.versions" version "$versionPluginVersion"
    id "org.jetbrains.kotlin.jvm" version "$kotlinVersion"
}

apply plugin: 'idea'
apply plugin: 'java'

kotlin {
    jvmToolchain {
        languageVersion.set(JavaLanguageVersion.of("21"))
    }
}

repositories {
    mavenCentral()
    google()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation "org.liquibase:liquibase-core:$liquibaseVersion"
    implementation "org.xerial:sqlite-jdbc:$sqlLiteVersion"
    implementation "org.jooq:jooq:$jooqVersion"
    testImplementation "org.junit.jupiter:junit-jupiter:$jUnitVersion"
}

sourceSets {
    main {
        java {
            srcDirs "$buildDir/jooq"
        }
    }
}

test {
    useJUnitPlatform()
    minHeapSize = '1G'
    maxHeapSize = '1G'
}

//noinspection GroovyAssignabilityCheck
tasks.register('dao-code-gen') {
    doLast {
        Connection conn = new Driver().connect("jdbc:h2:mem:test", null)

        Statement stmt = conn.createStatement()
        stmt.execute("drop all OBJECTS")
        stmt.execute("create schema EXAMPLE_DB")
        stmt.execute("set schema EXAMPLE_DB")
        stmt.close()

        def resourceAccessor = new DirectoryResourceAccessor(new File("${project.projectDir}/src/main/resources"))
        def db = new H2Database()
        db.setConnection(new JdbcConnection(conn))

        def liquibase = new Liquibase("liquibase-changelog.xml", resourceAccessor, db)
        liquibase.update(new Contexts())
        conn.commit()

        GenerationTool.generate(
                new Configuration()
                        .withJdbc(new Jdbc()
                                .withDriver('org.h2.Driver')
                                .withUrl('jdbc:h2:mem:test')
                                .withUser('')
                                .withPassword(''))
                        .withGenerator(new Generator()
                                .withDatabase(
                                        new Database()
                                                .withExcludes("DATABASECHANGELOG|DATABASECHANGELOGLOCK")
                                                .withInputSchema("EXAMPLE_DB")
                                )
                                .withGenerate(new Generate()
                                        .withPojos(true)
                                        .withDaos(true))
                                .withTarget(
                                        new Target()
                                                .withPackageName('dev.encelade.example.dao.codegen')
                                                .withDirectory("$projectDir/build/jooq"))
                        )
        )

        conn.close()
    }
}

compileKotlin.dependsOn(tasks."dao-code-gen")
